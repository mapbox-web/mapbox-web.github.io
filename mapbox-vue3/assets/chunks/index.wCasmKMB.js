import{o as b,F as y,a as $,u as F,C as h}from"./use-path-layer.CvRjDMoi.js";import{x as p}from"./deck.esm.min.B6rDaoAx.js";import{M as m}from"./path-layer.s0Kv9vne.js";import{d as c,q as i,o as u,c as g,$ as C}from"./framework.BRu0xxKU.js";import{v,g as P}from"./v4.BCLFZokq.js";import"./csscolorparser.A-VAnCRm.js";import"./mapbox-gl-enhance.DI11R9zg.js";import"./commonjsHelpers.Cpj98o6Y.js";const d=(n,e)=>(n.install=a=>{for(const r of[n,...Object.values({})])a.component(r.name,r)},n),w={...b,radiusUnits:{type:String,default:"meters"},radiusScale:{type:Number,default:1},lineWidthUnits:{type:String,default:"meters"},lineWidthScale:{type:Number,default:1},stroked:{type:Boolean,default:!1},filled:{type:Boolean,default:!0},radiusMinPixels:{type:Number,default:0},radiusMaxPixels:{type:Number,default:Number.MAX_SAFE_INTEGER},lineWidthMinPixels:{type:Number,default:0},lineWidthMaxPixels:{type:Number,default:Number.MAX_SAFE_INTEGER},getPosition:{type:Function,default:n=>n.position},getRadius:{type:[Function,Number],default:1},getFillColor:{type:[Function,Array],default:()=>[0,0,0,255]},getLineColor:{type:[Function,Array],default:()=>[0,0,0,255]},getLineWidth:{type:[Function,Number],default:1},getDelayFactor:{type:Function,required:!0}},M={class:"mb-delayed-point-layer"},S={name:"MbDelayedPointLayer"},x=c({...S,props:w,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.DelayedPointLayer,...e,animationProgress:0,transitions:{animationProgress:{duration:3e3}},onDataLoad:()=>{const t=r();t&&t.setProps({animationProgress:1})}})),{getLayer:r}=y(e,a);return i(()=>e,o=>{const t=r();t&&t.setProps(o)},{deep:!0}),(o,t)=>(u(),g("i",M))}}),N=d(x);function L(n,e){let a;i(()=>n.center,o=>{a.setProps({center:o})}),i(()=>n.radius,o=>{a.setProps({radius:o})}),i(()=>n.visible,o=>{a.setProps({visible:o})});const r=o=>{const t=e();a=new p[o]({id:n.id,center:n.center,radius:n.radius,visible:n.visible}),t.addLayer(a,n.beforeId)};return C(()=>{const o=e();a&&o.removeLayer(n.id)}),{addDeckGLCircleLayer:r}}const f={id:{type:String,default:()=>v()},beforeId:{type:String},center:{type:Array,required:!0},radius:{type:Number,default:5e3},visible:{type:Boolean,default:!0}},E={...f},B={class:"mb-diffusion-circle-layer"},W={name:"MbDiffusionCircleLayer"},k=c({...W,props:E,setup(n){const e=n,a=()=>{o("DiffusionCircleLayer")},{getMapboxInstance:r}=P(a),{addDeckGLCircleLayer:o}=L(e,r);return(t,l)=>(u(),g("i",B))}}),D=d(k),j={...b,styleName:{type:String,default:"The Matrix"},getElevation:{type:[Function,Number],default:1e3},getFillColor:{type:[Function,Array],default:()=>[0,125,125]},getPolygon:{type:Function,required:!0},elevationScale:{type:Number,default:1}},A={class:"mb-flow-building-layer"},T={name:"MbFlowBuildingLayer"},G=c({...T,props:j,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.FlowBuildingLayer,styleName:e.styleName,wireframe:!1,extruded:!0,filled:!0,getElevation:e.getElevation,getFillColor:e.getFillColor,getPolygon:e.getPolygon,elevationScale:e.elevationScale})),{getLayer:r}=y(e,a);return i(()=>e.styleName,o=>{const t=r();t&&t.setProps({styleName:o})}),i(()=>e.getElevation,o=>{const t=r();t&&t.setProps({getElevation:o})}),i(()=>e.getFillColor,o=>{const t=r();t&&t.setProps({getFillColor:o})}),i(()=>e.getPolygon,o=>{const t=r();t&&t.setProps({getPolygon:o})}),i(()=>e.elevationScale,o=>{const t=r();t&&t.setProps({elevationScale:o})}),(o,t)=>(u(),g("i",A))}}),O=d(G),q={...f},R={class:"mb-glow-circle-layer"},_={name:"MbGlowCircleLayer"},I=c({..._,props:q,setup(n){const e=n,a=()=>{o("GlowCircleLayer")},{getMapboxInstance:r}=P(a),{addDeckGLCircleLayer:o}=L(e,r);return(t,l)=>(u(),g("i",R))}}),H=d(I),U={...b,getElevation:{type:[Function,Number],default:1e3},getFillColor:{type:[Function,Array],default:()=>[0,125,125]},getPolygon:{type:Function,required:!0},elevationScale:{type:Number,default:1},material:Object},V={class:"mb-gradient-building-layer"},z={name:"MbGradientBuildingLayer"},X=c({...z,props:U,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.GradientBuildingLayer,wireframe:!1,extruded:!0,filled:!0,getElevation:e.getElevation,getFillColor:e.getFillColor,getPolygon:e.getPolygon,elevationScale:0,material:e.material,onDataLoad:()=>{const t=r();t&&t.setProps({elevationScale:e.elevationScale})},transitions:{elevationScale:{duration:3e3}}})),{getLayer:r}=y(e,a);return i(()=>e.getElevation,o=>{const t=r();t&&t.setProps({getElevation:o})}),i(()=>e.getFillColor,o=>{const t=r();t&&t.setProps({getFillColor:o})}),i(()=>e.getPolygon,o=>{const t=r();t&&t.setProps({getPolygon:o})}),i(()=>e.elevationScale,o=>{const t=r();t&&t.setProps({elevationScale:o})}),(o,t)=>(u(),g("i",V))}}),J=d(X),K={...$,trailLength:{type:Number,default:5}},Q={class:"mb-migration-layer"},Y={name:"MbMigrationLayer"},Z=c({...Y,props:K,setup(n){const e=n,a=l=>new m(Object.assign({},l,{type:p.MigrationLayer,trailLength:e.trailLength,getWidth:e.width,getHeight:e.height,getSourcePosition:e.sourcePosition,getTargetPosition:e.targetPosition,getSourceColor:o(e.sourceColor),getTargetColor:o(e.targetColor)})),{getLayer:r,parseColorVal:o,setColorProps:t}=y(e,a);return i(()=>e.trailLength,l=>{const s=r();s&&s.setProps({trailLength:l})}),i(()=>e.width,l=>{const s=r();s==null||s.setProps({getWidth:l})}),i(()=>e.height,l=>{const s=r();s==null||s.setProps({getHeight:l})}),i(()=>e.sourcePosition,l=>{const s=r();s==null||s.setProps({getSourcePosition:l})}),i(()=>e.targetPosition,l=>{const s=r();s==null||s.setProps({getTargetPosition:l})}),i(()=>e.sourceColor,l=>{t("getSourceColor",l)}),i(()=>e.targetColor,l=>{t("getTargetColor",l)}),(l,s)=>(u(),g("i",Q))}}),ee=d(Z),te={id:{type:String,default:()=>v()},coordinates:{type:Array,required:!0},radius:{type:Number,default:5e3}},oe={class:"mb-radar-layer"},re={name:"MbRadarLayer"},ne=c({...re,props:te,setup(n){const e=n;let a;const r=()=>{const t=o();a=new p.RadarLayer({id:e.id,coordinates:e.coordinates,radius:e.radius}),t.addLayer(a)},{getMapboxInstance:o}=P(r);return C(()=>{const t=o();a&&t.removeLayer(e.id)}),(t,l)=>(u(),g("i",oe))}}),ae=d(ne),le={...b,getPosition:{type:Function,required:!0},getHeight:{type:[Number,Function],default:1e3},trailLength:{type:Number,default:100},speed:{type:Number,default:10},getColor:{type:[String,Function],default:"black"}},ie={class:"mb-spark-layer"},se={name:"MbSparkLayer"},ce=c({...se,props:le,setup(n){const e=n,a=l=>new m(Object.assign({},l,{type:p.SparkLayer,speed:e.speed,trailLength:e.trailLength,getColor:o(e.getColor),getPosition:e.getPosition,getHeight:e.getHeight})),{getLayer:r,parseColorVal:o,setColorProps:t}=y(e,a);return i(()=>e.getColor,l=>{t("getColor",l)}),i(()=>e.trailLength,l=>{const s=r();s==null||s.setProps({trailLength:l})}),i(()=>e.speed,l=>{const s=r();s==null||s.setProps({speed:l})}),(l,s)=>(u(),g("i",ie))}}),ue=d(ce),ge={...b,texture:{type:String,required:!0},getElevation:{type:[Function,Number],default:1e3},getFillColor:{type:[Function,Array],default:()=>[0,125,125]},getPolygon:{type:Function,required:!0},elevationScale:{type:Number,default:1}},de={class:"mb-texture-building-layer"},pe={name:"MbTextureBuildingLayer"},ye=c({...pe,props:ge,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.TextureBuildingLayer,texture:e.texture,wireframe:!1,extruded:!0,filled:!0,getElevation:e.getElevation,getFillColor:e.getFillColor,getPolygon:e.getPolygon,elevationScale:e.elevationScale})),{getLayer:r}=y(e,a);return i(()=>e.texture,o=>{const t=r();t==null||t.setProps({texture:o})}),i(()=>e.getElevation,o=>{const t=r();t==null||t.setProps({getElevation:o})}),i(()=>e.getFillColor,o=>{const t=r();t==null||t.setProps({getFillColor:o})}),i(()=>e.getPolygon,o=>{const t=r();t==null||t.setProps({getPolygon:o})}),i(()=>e.elevationScale,o=>{const t=r();t==null||t.setProps({elevationScale:o})}),(o,t)=>(u(),g("i",de))}}),me=d(ye),be={...F,trailLength:{type:Number,default:5},speed:{type:Number,default:1},interval:{type:Number,default:10}},Pe={class:"mb-trail-layer"},Le={name:"MbTrailLayer"},fe=c({...Le,props:be,setup(n){const e=n,a=l=>new m(Object.assign({},l,{type:p.TrailLayer,trailLength:e.trailLength,speed:e.speed,interval:e.interval,widthUnits:e.widthUnits,widthScale:e.widthScale,widthMinPixels:e.widthMinPixels,widthMaxPixels:e.widthMaxPixels,capRounded:e.capRounded,jointRounded:e.jointRounded,miterLimit:e.miterLimit,getPath:e.getPath,getWidth:e.getWidth,getColor:o(e.getColor)})),{getLayer:r,parseColorVal:o,setColorProps:t}=y(e,a);return h(e,{getLayer:r,parseColorVal:o,setColorProps:t}),i(()=>e.trailLength,l=>{const s=r();s&&s.setProps({trailLength:l})}),i(()=>e.speed,l=>{const s=r();s==null||s.setProps({speed:l})}),(l,s)=>(u(),g("i",Pe))}}),Ce=d(fe),ve={...b,getPolygon:{type:Function,required:!0},waterColor:{type:Array,default:()=>[0,89,128]}},$e={class:"mb-water-layer"},Fe={name:"MbWaterLayer"},he=c({...Fe,props:ve,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.WaterLayer,wireframe:!1,extruded:!1,filled:!0,getPolygon:e.getPolygon,elevationScale:0,waterColor:e.waterColor})),{getLayer:r}=y(e,a);return i(()=>e.getPolygon,o=>{const t=r();t==null||t.setProps({getPolygon:o})}),(o,t)=>(u(),g("i",$e))}}),we=d(he),Me={...f},Se={class:"mb-wave-circle-layer"},xe={name:"MbWaveCircleLayer"},Ne=c({...xe,props:Me,setup(n){const e=n,a=()=>{o("WaveCircleLayer")},{getMapboxInstance:r}=P(a),{addDeckGLCircleLayer:o}=L(e,r);return(t,l)=>(u(),g("i",Se))}}),Ee=d(Ne),Be={...b,getElevation:{type:[Function,Number],default:1e3},getFillColor:{type:[Function,Array],default:()=>[0,125,125]},getPolygon:{type:Function,default:n=>n.polygon},elevationScale:{type:Number,default:1},normalize:{type:Boolean,default:!0}},We={class:"mb-window-building-layer"},ke={name:"MbWindowBuildingLayer"},De=c({...ke,props:Be,setup(n){const e=n,a=o=>new m(Object.assign({},o,{type:p.WindowBuildingLayer,wireframe:!1,extruded:!0,filled:!0,getElevation:e.getElevation,getFillColor:e.getFillColor,getPolygon:e.getPolygon,elevationScale:0,onDataLoad:()=>{const t=r();t&&t.setProps({elevationScale:e.elevationScale})},transitions:{elevationScale:{duration:3e3}},_normalize:e.normalize})),{getLayer:r}=y(e,a);return i(()=>e.getElevation,o=>{const t=r();t==null||t.setProps({getElevation:o})}),i(()=>e.getFillColor,o=>{const t=r();t==null||t.setProps({getFillColor:o})}),i(()=>e.getPolygon,o=>{const t=r();t==null||t.setProps({getPolygon:o})}),i(()=>e.elevationScale,o=>{const t=r();t==null||t.setProps({elevationScale:o})}),(o,t)=>(u(),g("i",We))}}),je=d(De),Ae="1.0.0",Te=[N,D,O,H,J,ee,ae,ue,me,Ce,we,Ee,je],Ge=function(n,e={}){Te.forEach(a=>{n.component(a.name,a)})},ze={version:Ae,install:Ge};export{N as MbDelayedPointLayer,D as MbDiffusionCircleLayer,O as MbFlowBuildingLayer,H as MbGlowCircleLayer,J as MbGradientBuildingLayer,ee as MbMigrationLayer,ae as MbRadarLayer,ue as MbSparkLayer,me as MbTextureBuildingLayer,Ce as MbTrailLayer,we as MbWaterLayer,Ee as MbWaveCircleLayer,je as MbWindowBuildingLayer,ze as default,Ge as install};
