import{L as c,a7 as d,v as g}from"./framework.BRu0xxKU.js";const m=Symbol("mapContext");function C(t){let n,a;const{getMap:o}=c(m),p=d().emit,f=()=>n,i=()=>a;return g(async()=>{if(o){const r=await o;n=r.mapboxInstance,a=r.mapInstance,t==null||t(),p("created",{getMapboxInstance:f,getMapInstance:i})}}),{getMapboxInstance:f,getMapInstance:i}}var s,y=new Uint8Array(16);function l(){if(!s&&(s=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto<"u"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!s))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(y)}const v=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function b(t){return typeof t=="string"&&v.test(t)}var e=[];for(var u=0;u<256;++u)e.push((u+256).toString(16).substr(1));function x(t){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,a=(e[t[n+0]]+e[t[n+1]]+e[t[n+2]]+e[t[n+3]]+"-"+e[t[n+4]]+e[t[n+5]]+"-"+e[t[n+6]]+e[t[n+7]]+"-"+e[t[n+8]]+e[t[n+9]]+"-"+e[t[n+10]]+e[t[n+11]]+e[t[n+12]]+e[t[n+13]]+e[t[n+14]]+e[t[n+15]]).toLowerCase();if(!b(a))throw TypeError("Stringified UUID is invalid");return a}function R(t,n,a){t=t||{};var o=t.random||(t.rng||l)();return o[6]=o[6]&15|64,o[8]=o[8]&63|128,x(o)}export{C as g,m as t,R as v};
